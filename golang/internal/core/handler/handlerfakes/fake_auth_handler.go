// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"sync"

	fiber "github.com/gofiber/fiber/v2"
	"github.com/kyh0703/template/internal/core/handler"
)

type FakeAuthHandler struct {
	LoginStub        func(*fiber.Ctx) error
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	loginReturns struct {
		result1 error
	}
	loginReturnsOnCall map[int]struct {
		result1 error
	}
	LogoutStub        func(*fiber.Ctx) error
	logoutMutex       sync.RWMutex
	logoutArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	logoutReturns struct {
		result1 error
	}
	logoutReturnsOnCall map[int]struct {
		result1 error
	}
	RefreshStub        func(*fiber.Ctx) error
	refreshMutex       sync.RWMutex
	refreshArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	refreshReturns struct {
		result1 error
	}
	refreshReturnsOnCall map[int]struct {
		result1 error
	}
	RegisterStub        func(*fiber.Ctx) error
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	registerReturns struct {
		result1 error
	}
	registerReturnsOnCall map[int]struct {
		result1 error
	}
	TableStub        func() []handler.Mapper
	tableMutex       sync.RWMutex
	tableArgsForCall []struct {
	}
	tableReturns struct {
		result1 []handler.Mapper
	}
	tableReturnsOnCall map[int]struct {
		result1 []handler.Mapper
	}
	WhoamiStub        func(*fiber.Ctx) error
	whoamiMutex       sync.RWMutex
	whoamiArgsForCall []struct {
		arg1 *fiber.Ctx
	}
	whoamiReturns struct {
		result1 error
	}
	whoamiReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthHandler) Login(arg1 *fiber.Ctx) error {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.LoginStub
	fakeReturns := fake.loginReturns
	fake.recordInvocation("Login", []interface{}{arg1})
	fake.loginMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthHandler) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeAuthHandler) LoginCalls(stub func(*fiber.Ctx) error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *FakeAuthHandler) LoginArgsForCall(i int) *fiber.Ctx {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthHandler) LoginReturns(result1 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) LoginReturnsOnCall(i int, result1 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) Logout(arg1 *fiber.Ctx) error {
	fake.logoutMutex.Lock()
	ret, specificReturn := fake.logoutReturnsOnCall[len(fake.logoutArgsForCall)]
	fake.logoutArgsForCall = append(fake.logoutArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.LogoutStub
	fakeReturns := fake.logoutReturns
	fake.recordInvocation("Logout", []interface{}{arg1})
	fake.logoutMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthHandler) LogoutCallCount() int {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	return len(fake.logoutArgsForCall)
}

func (fake *FakeAuthHandler) LogoutCalls(stub func(*fiber.Ctx) error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = stub
}

func (fake *FakeAuthHandler) LogoutArgsForCall(i int) *fiber.Ctx {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	argsForCall := fake.logoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthHandler) LogoutReturns(result1 error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = nil
	fake.logoutReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) LogoutReturnsOnCall(i int, result1 error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = nil
	if fake.logoutReturnsOnCall == nil {
		fake.logoutReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.logoutReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) Refresh(arg1 *fiber.Ctx) error {
	fake.refreshMutex.Lock()
	ret, specificReturn := fake.refreshReturnsOnCall[len(fake.refreshArgsForCall)]
	fake.refreshArgsForCall = append(fake.refreshArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.RefreshStub
	fakeReturns := fake.refreshReturns
	fake.recordInvocation("Refresh", []interface{}{arg1})
	fake.refreshMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthHandler) RefreshCallCount() int {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	return len(fake.refreshArgsForCall)
}

func (fake *FakeAuthHandler) RefreshCalls(stub func(*fiber.Ctx) error) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = stub
}

func (fake *FakeAuthHandler) RefreshArgsForCall(i int) *fiber.Ctx {
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	argsForCall := fake.refreshArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthHandler) RefreshReturns(result1 error) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = nil
	fake.refreshReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) RefreshReturnsOnCall(i int, result1 error) {
	fake.refreshMutex.Lock()
	defer fake.refreshMutex.Unlock()
	fake.RefreshStub = nil
	if fake.refreshReturnsOnCall == nil {
		fake.refreshReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.refreshReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) Register(arg1 *fiber.Ctx) error {
	fake.registerMutex.Lock()
	ret, specificReturn := fake.registerReturnsOnCall[len(fake.registerArgsForCall)]
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.RegisterStub
	fakeReturns := fake.registerReturns
	fake.recordInvocation("Register", []interface{}{arg1})
	fake.registerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthHandler) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeAuthHandler) RegisterCalls(stub func(*fiber.Ctx) error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = stub
}

func (fake *FakeAuthHandler) RegisterArgsForCall(i int) *fiber.Ctx {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	argsForCall := fake.registerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthHandler) RegisterReturns(result1 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) RegisterReturnsOnCall(i int, result1 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	if fake.registerReturnsOnCall == nil {
		fake.registerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) Table() []handler.Mapper {
	fake.tableMutex.Lock()
	ret, specificReturn := fake.tableReturnsOnCall[len(fake.tableArgsForCall)]
	fake.tableArgsForCall = append(fake.tableArgsForCall, struct {
	}{})
	stub := fake.TableStub
	fakeReturns := fake.tableReturns
	fake.recordInvocation("Table", []interface{}{})
	fake.tableMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthHandler) TableCallCount() int {
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	return len(fake.tableArgsForCall)
}

func (fake *FakeAuthHandler) TableCalls(stub func() []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = stub
}

func (fake *FakeAuthHandler) TableReturns(result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	fake.tableReturns = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeAuthHandler) TableReturnsOnCall(i int, result1 []handler.Mapper) {
	fake.tableMutex.Lock()
	defer fake.tableMutex.Unlock()
	fake.TableStub = nil
	if fake.tableReturnsOnCall == nil {
		fake.tableReturnsOnCall = make(map[int]struct {
			result1 []handler.Mapper
		})
	}
	fake.tableReturnsOnCall[i] = struct {
		result1 []handler.Mapper
	}{result1}
}

func (fake *FakeAuthHandler) Whoami(arg1 *fiber.Ctx) error {
	fake.whoamiMutex.Lock()
	ret, specificReturn := fake.whoamiReturnsOnCall[len(fake.whoamiArgsForCall)]
	fake.whoamiArgsForCall = append(fake.whoamiArgsForCall, struct {
		arg1 *fiber.Ctx
	}{arg1})
	stub := fake.WhoamiStub
	fakeReturns := fake.whoamiReturns
	fake.recordInvocation("Whoami", []interface{}{arg1})
	fake.whoamiMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthHandler) WhoamiCallCount() int {
	fake.whoamiMutex.RLock()
	defer fake.whoamiMutex.RUnlock()
	return len(fake.whoamiArgsForCall)
}

func (fake *FakeAuthHandler) WhoamiCalls(stub func(*fiber.Ctx) error) {
	fake.whoamiMutex.Lock()
	defer fake.whoamiMutex.Unlock()
	fake.WhoamiStub = stub
}

func (fake *FakeAuthHandler) WhoamiArgsForCall(i int) *fiber.Ctx {
	fake.whoamiMutex.RLock()
	defer fake.whoamiMutex.RUnlock()
	argsForCall := fake.whoamiArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAuthHandler) WhoamiReturns(result1 error) {
	fake.whoamiMutex.Lock()
	defer fake.whoamiMutex.Unlock()
	fake.WhoamiStub = nil
	fake.whoamiReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) WhoamiReturnsOnCall(i int, result1 error) {
	fake.whoamiMutex.Lock()
	defer fake.whoamiMutex.Unlock()
	fake.WhoamiStub = nil
	if fake.whoamiReturnsOnCall == nil {
		fake.whoamiReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.whoamiReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	fake.refreshMutex.RLock()
	defer fake.refreshMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	fake.tableMutex.RLock()
	defer fake.tableMutex.RUnlock()
	fake.whoamiMutex.RLock()
	defer fake.whoamiMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.AuthHandler = new(FakeAuthHandler)
