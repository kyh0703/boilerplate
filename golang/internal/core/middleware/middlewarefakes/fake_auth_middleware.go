// Code generated by counterfeiter. DO NOT EDIT.
package middlewarefakes

import (
	"sync"

	fiber "github.com/gofiber/fiber/v2"
	"github.com/kyh0703/template/internal/core/middleware"
)

type FakeAuthMiddleware struct {
	CurrentUserStub        func() fiber.Handler
	currentUserMutex       sync.RWMutex
	currentUserArgsForCall []struct {
	}
	currentUserReturns struct {
		result1 fiber.Handler
	}
	currentUserReturnsOnCall map[int]struct {
		result1 fiber.Handler
	}
	RequireAdminStub        func() fiber.Handler
	requireAdminMutex       sync.RWMutex
	requireAdminArgsForCall []struct {
	}
	requireAdminReturns struct {
		result1 fiber.Handler
	}
	requireAdminReturnsOnCall map[int]struct {
		result1 fiber.Handler
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthMiddleware) CurrentUser() fiber.Handler {
	fake.currentUserMutex.Lock()
	ret, specificReturn := fake.currentUserReturnsOnCall[len(fake.currentUserArgsForCall)]
	fake.currentUserArgsForCall = append(fake.currentUserArgsForCall, struct {
	}{})
	stub := fake.CurrentUserStub
	fakeReturns := fake.currentUserReturns
	fake.recordInvocation("CurrentUser", []interface{}{})
	fake.currentUserMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthMiddleware) CurrentUserCallCount() int {
	fake.currentUserMutex.RLock()
	defer fake.currentUserMutex.RUnlock()
	return len(fake.currentUserArgsForCall)
}

func (fake *FakeAuthMiddleware) CurrentUserCalls(stub func() fiber.Handler) {
	fake.currentUserMutex.Lock()
	defer fake.currentUserMutex.Unlock()
	fake.CurrentUserStub = stub
}

func (fake *FakeAuthMiddleware) CurrentUserReturns(result1 fiber.Handler) {
	fake.currentUserMutex.Lock()
	defer fake.currentUserMutex.Unlock()
	fake.CurrentUserStub = nil
	fake.currentUserReturns = struct {
		result1 fiber.Handler
	}{result1}
}

func (fake *FakeAuthMiddleware) CurrentUserReturnsOnCall(i int, result1 fiber.Handler) {
	fake.currentUserMutex.Lock()
	defer fake.currentUserMutex.Unlock()
	fake.CurrentUserStub = nil
	if fake.currentUserReturnsOnCall == nil {
		fake.currentUserReturnsOnCall = make(map[int]struct {
			result1 fiber.Handler
		})
	}
	fake.currentUserReturnsOnCall[i] = struct {
		result1 fiber.Handler
	}{result1}
}

func (fake *FakeAuthMiddleware) RequireAdmin() fiber.Handler {
	fake.requireAdminMutex.Lock()
	ret, specificReturn := fake.requireAdminReturnsOnCall[len(fake.requireAdminArgsForCall)]
	fake.requireAdminArgsForCall = append(fake.requireAdminArgsForCall, struct {
	}{})
	stub := fake.RequireAdminStub
	fakeReturns := fake.requireAdminReturns
	fake.recordInvocation("RequireAdmin", []interface{}{})
	fake.requireAdminMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAuthMiddleware) RequireAdminCallCount() int {
	fake.requireAdminMutex.RLock()
	defer fake.requireAdminMutex.RUnlock()
	return len(fake.requireAdminArgsForCall)
}

func (fake *FakeAuthMiddleware) RequireAdminCalls(stub func() fiber.Handler) {
	fake.requireAdminMutex.Lock()
	defer fake.requireAdminMutex.Unlock()
	fake.RequireAdminStub = stub
}

func (fake *FakeAuthMiddleware) RequireAdminReturns(result1 fiber.Handler) {
	fake.requireAdminMutex.Lock()
	defer fake.requireAdminMutex.Unlock()
	fake.RequireAdminStub = nil
	fake.requireAdminReturns = struct {
		result1 fiber.Handler
	}{result1}
}

func (fake *FakeAuthMiddleware) RequireAdminReturnsOnCall(i int, result1 fiber.Handler) {
	fake.requireAdminMutex.Lock()
	defer fake.requireAdminMutex.Unlock()
	fake.RequireAdminStub = nil
	if fake.requireAdminReturnsOnCall == nil {
		fake.requireAdminReturnsOnCall = make(map[int]struct {
			result1 fiber.Handler
		})
	}
	fake.requireAdminReturnsOnCall[i] = struct {
		result1 fiber.Handler
	}{result1}
}

func (fake *FakeAuthMiddleware) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.currentUserMutex.RLock()
	defer fake.currentUserMutex.RUnlock()
	fake.requireAdminMutex.RLock()
	defer fake.requireAdminMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthMiddleware) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ middleware.AuthMiddleware = new(FakeAuthMiddleware)
