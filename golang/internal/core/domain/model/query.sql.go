// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package model

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  user_id,
  title,
  content,
  update_at,
  create_at
) VALUES (
  ?, ?, ?, now(), now()
)
RETURNING id, user_id, title, content, update_at, create_at
`

type CreatePostParams struct {
	UserID  int64          `json:"userId"`
	Title   string         `json:"title"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.UserID, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
  user_id,
  refresh_token,
  expires_in,
  create_at
) VALUES (
  ?, ?, ?, now()
)
RETURNING id, user_id, refresh_token, expires_in, create_at
`

type CreateTokenParams struct {
	UserID       int64  `json:"userId"`
	RefreshToken string `json:"refreshToken"`
	ExpiresIn    int64  `json:"expiresIn"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.UserID, arg.RefreshToken, arg.ExpiresIn)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresIn,
		&i.CreateAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  password,
  name,
  bio,
  update_at,
  create_at
) VALUES (
  ?, ?, ?, ?, now(), now()
)
RETURNING id, email, password, name, bio, update_at, create_at
`

type CreateUserParams struct {
	Email    string         `json:"email" validate:"required,email"`
	Password string         `json:"password" validate:"required,min=8,max=32"`
	Name     string         `json:"name"`
	Bio      sql.NullString `json:"bio"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Bio,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Bio,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens
WHERE id = ?
`

func (q *Queries) DeleteToken(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteToken, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, user_id, title, content, update_at, create_at FROM posts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT id, user_id, refresh_token, expires_in, create_at FROM tokens
WHERE id = ? LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, id int64) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, id)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresIn,
		&i.CreateAt,
	)
	return i, err
}

const getTokenByUserID = `-- name: GetTokenByUserID :one
SELECT id, user_id, refresh_token, expires_in, create_at FROM tokens
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetTokenByUserID(ctx context.Context, userID int64) (Token, error) {
	row := q.db.QueryRowContext(ctx, getTokenByUserID, userID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiresIn,
		&i.CreateAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, name, bio, update_at, create_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Bio,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, name, bio, update_at, create_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Bio,
		&i.UpdateAt,
		&i.CreateAt,
	)
	return i, err
}

const listPosts = `-- name: ListPosts :many
SELECT id, user_id, title, content, update_at, create_at FROM posts
WHERE user_id = ?
ORDER BY title
`

func (q *Queries) ListPosts(ctx context.Context, userID int64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.UpdateAt,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTokens = `-- name: ListTokens :many
SELECT id, user_id, refresh_token, expires_in, create_at FROM tokens
ORDER BY create_at
`

func (q *Queries) ListTokens(ctx context.Context) ([]Token, error) {
	rows, err := q.db.QueryContext(ctx, listTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Token
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.RefreshToken,
			&i.ExpiresIn,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, name, bio, update_at, create_at FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Name,
			&i.Bio,
			&i.UpdateAt,
			&i.CreateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchPost = `-- name: PatchPost :exec
UPDATE posts SET
title = COALESCE(?2, title),
content = COALESCE(?3, content),
update_at = now()
WHERE id = ?
RETURNING id, user_id, title, content, update_at, create_at
`

type PatchPostParams struct {
	Title   sql.NullString `json:"title"`
	Content sql.NullString `json:"content"`
	ID      int64          `json:"id"`
}

func (q *Queries) PatchPost(ctx context.Context, arg PatchPostParams) error {
	_, err := q.db.ExecContext(ctx, patchPost, arg.Title, arg.Content, arg.ID)
	return err
}

const patchUser = `-- name: PatchUser :exec
UPDATE users SET
name = COALESCE(?2, name),
password = COALESCE(?3, password),
bio = COALESCE(?4, bio),
update_at = now()
WHERE id = ?
RETURNING id, email, password, name, bio, update_at, create_at
`

type PatchUserParams struct {
	Name     sql.NullString `json:"name"`
	Password sql.NullString `json:"password" validate:"required,min=8,max=32"`
	Bio      sql.NullString `json:"bio"`
	ID       int64          `json:"id"`
}

func (q *Queries) PatchUser(ctx context.Context, arg PatchUserParams) error {
	_, err := q.db.ExecContext(ctx, patchUser,
		arg.Name,
		arg.Password,
		arg.Bio,
		arg.ID,
	)
	return err
}

const updateToken = `-- name: UpdateToken :exec
UPDATE tokens SET
user_id = ?,
refresh_token = ?,
expires_in = ?
WHERE id = ?
RETURNING id, user_id, refresh_token, expires_in, create_at
`

type UpdateTokenParams struct {
	UserID       int64  `json:"userId"`
	RefreshToken string `json:"refreshToken"`
	ExpiresIn    int64  `json:"expiresIn"`
	ID           int64  `json:"id"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateToken,
		arg.UserID,
		arg.RefreshToken,
		arg.ExpiresIn,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET
email = ?,
name = ?,
password = ?,
bio = ?,
update_at = now()
WHERE id = ?
RETURNING id, email, password, name, bio, update_at, create_at
`

type UpdateUserParams struct {
	Email    string         `json:"email" validate:"required,email"`
	Name     string         `json:"name"`
	Password string         `json:"password" validate:"required,min=8,max=32"`
	Bio      sql.NullString `json:"bio"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.Bio,
		arg.ID,
	)
	return err
}
